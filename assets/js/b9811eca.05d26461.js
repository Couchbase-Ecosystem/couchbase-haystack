"use strict";(self.webpackChunkcouchbase_haystack=self.webpackChunkcouchbase_haystack||[]).push([[67],{6672:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var s=t(4848),c=t(8453);const i={id:"couchbase_document_store",title:"CouchbaseDocumentStore"},o="CouchbaseDocumentStore",r={id:"reference/couchbase_document_store",title:"CouchbaseDocumentStore",description:"CouchbaseDocumentStore is a DocumentStore implementation designed to interact with the Couchbase Capella service or Couchbase server. This implementation allows you to efficiently store and retrieve documents, taking advantage of Couchbase\u2019s scalable and high-performance capabilities. Document properties are stored within Couchbase collections, and embeddings for dense retrievals can be stored as part of the document attributes. This implementation is based on the Couchbase Python SDK, ensuring smooth integration and operation.",source:"@site/docs/reference/couchbase_document_store.md",sourceDirName:"reference",slug:"/reference/couchbase_document_store",permalink:"/reference/couchbase_document_store",draft:!1,unlisted:!1,editUrl:"https://github.com/Couchbase-Ecosystem/couchbase-haystack/docs/reference/couchbase_document_store.md",tags:[],version:"current",frontMatter:{id:"couchbase_document_store",title:"CouchbaseDocumentStore"},sidebar:"tutorialSidebar",previous:{title:"CouchbaseEmbeddingRetriever",permalink:"/reference/couchbase_embedding_retriever"},next:{title:"DocumentFilter",permalink:"/reference/document_filter"}},d={},l=[{value:"Installation",id:"installation",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Method Overview",id:"method-overview",level:3},{value:"<code>__init__</code>",id:"__init__",level:4},{value:"<code>write_documents</code>",id:"write_documents",level:4},{value:"<code>filter_documents</code>",id:"filter_documents",level:4},{value:"<code>count_documents</code>",id:"count_documents",level:4},{value:"<code>delete_documents</code>",id:"delete_documents",level:4},{value:"<code>_embedding_retrieval</code>",id:"_embedding_retrieval",level:4},{value:"Serialization Methods",id:"serialization-methods",level:3},{value:"<code>to_dict</code>",id:"to_dict",level:4},{value:"<code>from_dict</code>",id:"from_dict",level:4}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"couchbasedocumentstore",children:"CouchbaseDocumentStore"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"})," is a DocumentStore implementation designed to interact with the ",(0,s.jsx)(n.a,{href:"https://cloud.couchbase.com",children:"Couchbase Capella"})," service or ",(0,s.jsx)(n.a,{href:"https://www.couchbase.com/products/server",children:"Couchbase server"}),". This implementation allows you to efficiently store and retrieve documents, taking advantage of Couchbase\u2019s scalable and high-performance capabilities. Document properties are stored within Couchbase collections, and embeddings for dense retrievals can be stored as part of the document attributes. This implementation is based on the ",(0,s.jsx)(n.a,{href:"https://docs.couchbase.com/python-sdk/current/hello-world/start-using-sdk.html",children:"Couchbase Python SDK"}),", ensuring smooth integration and operation."]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:["To use the ",(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"}),", make sure you have the necessary dependencies installed:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install couchbase-haystack\n"})}),"\n",(0,s.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,s.jsx)(n.h3,{id:"initialization",children:"Initialization"}),"\n",(0,s.jsxs)(n.p,{children:["To create an instance of ",(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"}),", you need to provide connection details, authentication credentials, and specify the bucket, scope, collection, and vector search index."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from haystack.document_stores.couchbase import CouchbaseDocumentStore\nfrom haystack.utils.auth import Secret\nfrom couchbase.options import ClusterOptions\nfrom couchbase.auth import PasswordAuthenticator\n\n# Initialize CouchbaseDocumentStore\ndocument_store = CouchbaseDocumentStore(\n    cluster_connection_string=Secret.from_env_var("CB_CONNECTION_STRING"),\n    authenticator=PasswordAuthenticator(username="username", password="password"),\n    bucket="my_bucket",\n    scope="my_scope",\n    collection="my_collection",\n    vector_search_index="my_vector_index"\n)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"method-overview",children:"Method Overview"}),"\n",(0,s.jsx)(n.h4,{id:"__init__",children:(0,s.jsx)(n.code,{children:"__init__"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def __init__(\n    self,\n    *,\n    cluster_connection_string: Secret = Secret.from_env_var("CB_CONNECTION_STRING"),\n    authenticator: Union[CouchbasePasswordAuthenticator, CouchbaseCertificateAuthenticator],\n    cluster_options: CouchbaseClusterOptions = CouchbaseClusterOptions(),\n    bucket: str,\n    scope: str,\n    collection: str,\n    vector_search_index: str,\n    **kwargs: Dict[str, Any],\n):\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Input Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cluster_connection_string"})," (Secret): Connection string for the Couchbase cluster."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"authenticator"})," (Union[CouchbasePasswordAuthenticator, CouchbaseCertificateAuthenticator]): Authenticator for Couchbase."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"cluster_options"})," (CouchbaseClusterOptions): Additional options for the Couchbase cluster."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bucket"})," (str): The name of the bucket to connect to."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"scope"})," (str): The name of the scope within the bucket."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"collection"})," (str): The name of the collection within the scope."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"vector_search_index"})," (str): The index name for vector search."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Raises:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ValueError"}),": If the collection name contains invalid characters."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"write_documents",children:(0,s.jsx)(n.code,{children:"write_documents"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def write_documents(\n    documents: List[Document],\n    policy: DuplicatePolicy = DuplicatePolicy.NONE\n) -> int:\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Input Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"documents"})," (List[Document]): A list of ",(0,s.jsx)(n.code,{children:"Document"})," objects to be written to the Couchbase collection."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"policy"})," (DuplicatePolicy): The policy for handling duplicate documents. Can be:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DuplicatePolicy.FAIL"}),": Raises an error if a document with the same ID already exists."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DuplicatePolicy.OVERWRITE"}),": Overwrites any existing documents with the same ID."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DuplicatePolicy.NONE"}),": Equivalent to ",(0,s.jsx)(n.code,{children:"FAIL"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Response:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns an ",(0,s.jsx)(n.code,{children:"int"})," representing the number of documents successfully written to the document store."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Raises:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DuplicateDocumentError"}),": If a document with the same ID already exists and the policy is set to ",(0,s.jsx)(n.code,{children:"FAIL"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ValueError"}),": If the documents are not of type ",(0,s.jsx)(n.code,{children:"Document"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DocumentStoreError"}),": For other errors encountered during the write operation."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'documents = [\n    Document(content="Document 1 content", id="doc1"),\n    Document(content="Document 2 content", id="doc2"),\n]\n\nwritten_count = document_store.write_documents(documents, policy=DuplicatePolicy.OVERWRITE)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"filter_documents",children:(0,s.jsx)(n.code,{children:"filter_documents"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def filter_documents(filters: Optional[Dict[str, Any]] = None) -> List[Document]:\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Input Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"filters"})," (Optional[Dict[str, Any]]): A dictionary of filters to apply when retrieving documents. The keys should correspond to metadata fields, and the values should be lists of acceptable values."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Response:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns a ",(0,s.jsx)(n.code,{children:"List[Document]"})," containing documents that match the provided filters."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'filters = {"author": ["John Doe"], "year": ["2024"]}\ndocuments = document_store.filter_documents(filters=filters)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A list of ",(0,s.jsx)(n.code,{children:"Document"})," objects that match the specified filters."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"count_documents",children:(0,s.jsx)(n.code,{children:"count_documents"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def count_documents() -> int:\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Response:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns an ",(0,s.jsx)(n.code,{children:"int"})," representing the number of documents present in the document store."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"doc_count = document_store.count_documents()\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The total number of documents in the document store."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"delete_documents",children:(0,s.jsx)(n.code,{children:"delete_documents"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def delete_documents(document_ids: List[str]) -> None:\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Input Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"document_ids"})," (List[str]): A list of document IDs to delete from the document store."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Response:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This method does not return any value (",(0,s.jsx)(n.code,{children:"None"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'document_store.delete_documents(document_ids=["doc1", "doc2"])\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," If ",(0,s.jsx)(n.code,{children:"document_ids"})," is an empty list, no action will be taken."]}),"\n",(0,s.jsx)(n.h4,{id:"_embedding_retrieval",children:(0,s.jsx)(n.code,{children:"_embedding_retrieval"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def _embedding_retrieval(\n    query_embedding: List[float],\n    top_k: int = 10,\n    search_query: SearchQuery = None,\n    limit: Optional[int] = None,\n) -> List[Document]:\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Input Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"query_embedding"})," (List[float]): A list of float values representing the query embedding."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"top_k"})," (int): The number of top documents to return based on similarity to the query embedding. Default is 10."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"search_query"})," (Optional[SearchQuery]): Additional search filters to apply along with the vector search. Default is ",(0,s.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"limit"})," (Optional[int]): Maximum number of documents to return. Default is ",(0,s.jsx)(n.code,{children:"top_k"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Response:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns a ",(0,s.jsx)(n.code,{children:"List[Document]"})," containing the documents most similar to the provided ",(0,s.jsx)(n.code,{children:"query_embedding"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Raises:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ValueError"}),": If the ",(0,s.jsx)(n.code,{children:"query_embedding"})," is empty."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DocumentStoreError"}),": If there is an error retrieving documents from Couchbase."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"query_embedding = [0.1, 0.2, 0.3, ...]  # Example embedding vector\nsimilar_documents = document_store._embedding_retrieval(query_embedding=query_embedding, top_k=5)\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["A list of ",(0,s.jsx)(n.code,{children:"Document"})," objects that are most similar to the given ",(0,s.jsx)(n.code,{children:"query_embedding"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"serialization-methods",children:"Serialization Methods"}),"\n",(0,s.jsx)(n.h4,{id:"to_dict",children:(0,s.jsx)(n.code,{children:"to_dict"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def to_dict() -> Dict[str, Any]:\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Response:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns a ",(0,s.jsx)(n.code,{children:"Dict[str, Any]"})," containing the serialized state of the ",(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"})," instance."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"serialized_data = document_store.to_dict()\n"})}),"\n",(0,s.jsx)(n.h4,{id:"from_dict",children:(0,s.jsx)(n.code,{children:"from_dict"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'@classmethod\ndef from_dict(cls, data: Dict[str, Any]) -> "CouchbaseDocumentStore":\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Input Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"})," (Dict[str, Any]): A dictionary containing the serialized state of a ",(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Response:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns a ",(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"})," instance reconstructed from the provided dictionary."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"new_document_store = CouchbaseDocumentStore.from_dict(serialized_data)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(6540);const c={},i=s.createContext(c);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);