"use strict";(self.webpackChunkcouchbase_haystack=self.webpackChunkcouchbase_haystack||[]).push([[276],{46:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>l,frontMatter:()=>c,metadata:()=>a,toc:()=>d});var s=t(4848),o=t(8453);const c={id:"overview",title:"Overview",slug:"/"},r="Couchbase Haystack Integration",a={id:"home/overview",title:"Overview",description:"A Haystack Document Store for Couchbase.",source:"@site/docs/home/overview.md",sourceDirName:"home",slug:"/",permalink:"/couchbase-haystack/",draft:!1,unlisted:!1,editUrl:"https://github.com/Couchbase-Ecosystem/couchbase-haystack/docs/home/overview.md",tags:[],version:"current",frontMatter:{id:"overview",title:"Overview",slug:"/"},sidebar:"homeSidebar"},i={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Running Couchbase",id:"running-couchbase",level:3},{value:"Document Store",id:"document-store",level:3},{value:"Indexing Documents",id:"indexing-documents",level:3},{value:"Retrieving Documents",id:"retrieving-documents",level:3},{value:"More Examples",id:"more-examples",level:3},{value:"License",id:"license",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"couchbase-haystack-integration",children:"Couchbase Haystack Integration"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.a,{href:"https://docs.haystack.deepset.ai/docs/document_store",children:"Haystack"})," Document Store for ",(0,s.jsx)(n.a,{href:"https://www.couchbase.com",children:"Couchbase"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/Couchbase-Ecosystem/couchbase-haystack/actions?query=workflow%3Aci",children:(0,s.jsx)(n.img,{src:"https://github.com/Couchbase-Ecosystem/couchbase-haystack/actions/workflows/ci.yml/badge.svg",alt:"ci"})}),"\n",(0,s.jsx)(n.a,{href:"https://pypi.org/project/couchbase-haystack/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/pypi/v/couchbase-haystack.svg",alt:"pypi version"})}),"\n",(0,s.jsx)(n.a,{href:"https://pypi.org/project/haystack-ai/",children:(0,s.jsx)(n.img,{src:"https://img.shields.io/pypi/v/haystack-ai.svg?label=haystack",alt:"haystack version"})})]}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#overview",children:"Overview"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#installation",children:"Installation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#usage",children:"Usage"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#license",children:"License"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(n.p,{children:["An integration of ",(0,s.jsx)(n.a,{href:"https://www.couchbase.com",children:"Couchbase"})," NoSQL database with ",(0,s.jsx)(n.a,{href:"https://docs.haystack.deepset.ai/v2.0/docs/intro",children:"Haystack v2.0"})," by ",(0,s.jsx)(n.a,{href:"https://www.deepset.ai",children:"deepset"}),". In Couchbase ",(0,s.jsx)(n.a,{href:"https://docs.couchbase.com/server/current/vector-search/vector-search.html",children:"Vector search index"})," is being used for indexing document embeddings and dense retrievals."]}),"\n",(0,s.jsxs)(n.p,{children:["The library allows using Couchbase as a ",(0,s.jsx)(n.a,{href:"https://docs.haystack.deepset.ai/v2.0/docs/document-store",children:"DocumentStore"}),", and implements the required ",(0,s.jsx)(n.a,{href:"https://docs.haystack.deepset.ai/v2.0/docs/document-store#documentstore-protocol",children:"Protocol"})," methods. You can start working with the implementation by importing it from ",(0,s.jsx)(n.code,{children:"couchbase_haystack"})," package:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from couchbase_haystack import CouchbaseDocumentStore\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In addition to the ",(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"}),", the library includes the following Haystack components which can be used in a pipeline:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CouchbaseEmbeddingRetriever"}),": A typical ",(0,s.jsx)(n.a,{href:"https://docs.haystack.deepset.ai/v2.0/docs/retrievers",children:"retriever component"})," which can be used to query the vector store index and find related Documents. The component uses ",(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"})," to query embeddings."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"couchbase-haystack"})," library uses ",(0,s.jsx)(n.a,{href:"https://docs.couchbase.com/python-sdk/current/hello-world/start-using-sdk.html",children:"Python Driver"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"})," will store Documents as JSON documents in Couchbase. Embeddings are stored as part of the document, with indexing and querying of vector embeddings managed by Couchbase's dedicated ",(0,s.jsx)(n.a,{href:"https://docs.couchbase.com/server/current/vector-search/vector-search.html",children:"Vector Search Index"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"                                   +-----------------------------+\n                                   |       Couchbase Database    |\n                                   +-----------------------------+\n                                   |                             |\n                                   |      +----------------+     |\n                                   |      |  Data service  |     |\n                write_documents    |      +----------------+     |\n          +------------------------+-----\x3e|   properties   |     |\n          |                        |      |                |     |\n+---------+--------------+         |      |   embedding    |     |\n|                        |         |      +--------+-------+     |\n| CouchbaseDocumentStore |         |               |             |\n|                        |         |               |index        |\n+---------+--------------+         |               |             |\n          |                        |      +--------+--------+    |\n          |                        |      |  Search service |    |\n          |                        |      +-----------------+    |\n          +-----------------------\x3e|      |       FTS       |    |\n               query_embeddings    |      |   Vector Index  |    |\n                                   |      | (for embedding) |    |\n                                   |      +-----------------+    |\n                                   |                             |\n                                   +-----------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"In the above diagram:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Data service"}),": Supports the storing, setting, and retrieving of documents, specified by key. Basically where the documents are stored in key value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Properties"}),": Are Document ",(0,s.jsx)(n.a,{href:"https://docs.haystack.deepset.ai/v2.0/docs/data-classes#document",children:"attributes"})," stored as part of the Document."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Embedding"}),": Is also a property of the Document (just shown separately in the diagram for clarity) which is a vector of type ",(0,s.jsx)(n.code,{children:"LIST[FLOAT]"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Search service"}),": Where indexes specially purposed for Full Text Search and Vector search are created. The Search Service allows for efficient querying and retrieval based on both text content and vector embeddings."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"})," requires the vector index to be created manually either by SDK or UI. Before writing documents, you should make sure Documents are embedded by one of the provided ",(0,s.jsx)(n.a,{href:"https://docs.haystack.deepset.ai/v2.0/docs/embedders",children:"embedders"}),". For example, ",(0,s.jsx)(n.a,{href:"https://docs.haystack.deepset.ai/v2.0/docs/sentencetransformersdocumentembedder",children:"SentenceTransformersDocumentEmbedder"})," can be used in the indexing pipeline to calculate document embeddings before writing those to Couchbase."]}),"\n",(0,s.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"couchbase-haystack"})," can be installed as any other Python library, using pip:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pip install --upgrade pip # optional\npip install sentence-transformers # required in order to run pipeline examples given below\npip install couchbase-haystack\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.h3,{id:"running-couchbase",children:"Running Couchbase"}),"\n",(0,s.jsx)(n.p,{children:"You will need a running instance of Couchbase to use the components from this package. There are several options available:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.couchbase.com/server/current/getting-started/do-a-quick-install.html",children:"Docker"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.couchbase.com/products/capella",children:"Couchbase Cloud"})," - a fully managed cloud service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.couchbase.com/downloads",children:"Couchbase Server"})," - installable on various operating systems"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The simplest way to start the database locally is with a Docker container:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker run \\\n    --restart always \\\n    --publish=8091-8096:8091-8096 --publish=11210:11210 \\\n    --env COUCHBASE_ADMINISTRATOR_USERNAME=admin \\\n    --env COUCHBASE_ADMINISTRATOR_PASSWORD=passw0rd \\\n    couchbase:enterprise-7.6.2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example, the container is started using Couchbase Server version ",(0,s.jsx)(n.code,{children:"7.6.2"}),". The ",(0,s.jsx)(n.code,{children:"COUCHBASE_ADMINISTRATOR_USERNAME"})," and ",(0,s.jsx)(n.code,{children:"COUCHBASE_ADMINISTRATOR_PASSWORD"})," environment variables set the default credentials for authentication."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"}),(0,s.jsx)(n.br,{}),"\n","Assuming you have a Docker container running, navigate to ",(0,s.jsx)(n.a,{href:"http://localhost:8091",children:"http://localhost:8091"})," to open the Couchbase Web Console and explore your data."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"document-store",children:"Document Store"}),"\n",(0,s.jsxs)(n.p,{children:["Once you have the package installed and the database running, you can start using ",(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"})," as any other document stores that support embeddings."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from couchbase_haystack import CouchbaseDocumentStore\n\ndocument_store = CouchbaseDocumentStore(\n    cluster_connection_string= Secret.from_token("localhost"),\n    authenticator=CouchbasePasswordAuthenticator(\n        username = Secret.from_token("username"),\n        password = Secret.from_token("password")\n    ),\n    bucket = "haystack_bucket_name",\n    scope="haystack_scope_name",\n    collection="haystack_collection_name",\n    vector_search_index = "vector_search_index"\n)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Assuming there is a list of documents available and a running Couchbase database, you can write/index those in Couchbase, e.g.:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from haystack import Document\n\ndocuments = [Document(content="My name is Morgan and I live in Paris.")]\n\ndocument_store.write_documents(documents)\n'})}),"\n",(0,s.jsx)(n.p,{children:"If you intend to obtain embeddings before writing documents, use the following code:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from haystack import Document\n\n# import one of the available document embedders\nfrom haystack.components.embedders import SentenceTransformersDocumentEmbedder \n\ndocuments = [Document(content="My name is Morgan and I live in Paris.")]\n\ndocument_embedder = SentenceTransformersDocumentEmbedder(model="sentence-transformers/all-MiniLM-L6-v2")\ndocument_embedder.warm_up() # will download the model during first run\ndocuments_with_embeddings = document_embedder.run(documents)\n\ndocument_store.write_documents(documents_with_embeddings.get("documents"))\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Make sure the embedding model produces vectors of the same size as it has been set on ",(0,s.jsx)(n.code,{children:"Couchbase Vector Index"}),", e.g., setting ",(0,s.jsx)(n.code,{children:"embedding_dim=384"}),' would comply with the "sentence-transformers/all-MiniLM-L6-v2" model.']}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),"\nMost of the time you will be using ",(0,s.jsx)(n.a,{href:"https://docs.haystack.deepset.ai/v2.0/docs/pipelines",children:"Haystack Pipelines"})," to build both indexing and querying RAG scenarios."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["It is important to understand how Haystack Documents are stored in Couchbase after you call ",(0,s.jsx)(n.code,{children:"write_documents"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from random import random\n\nsample_embedding = [random() for _ in range(384)]  # using fake/random embedding for brevity here to simplify example\ndocument = Document(\n    content="My name is Morgan and I live in Paris.", embedding=sample_embedding, meta={"num_of_years": 3}\n)\ndocument.to_dict()\n'})}),"\n",(0,s.jsx)(n.p,{children:"The above code converts a Document to a dictionary and will render the following output:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'>>> output:\n{\n    "id": "11c255ad10bff4286781f596a5afd9ab093ed056d41bca4120\n\nc849058e52f24d",\n    "content": "My name is Morgan and I live in Paris.",\n    "dataframe": None,\n    "blob": None,\n    "score": None,\n    "embedding": [0.025010755222666936, 0.27502931836911926, 0.22321073814882275, ...], # vector of size 384\n    "num_of_years": 3,\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The data from the dictionary will be used to create a document in Couchbase after you write the document with ",(0,s.jsx)(n.code,{children:"document_store.write_documents([document])"}),". You could query it with Cypher, e.g., ",(0,s.jsx)(n.code,{children:"MATCH (doc:Document) RETURN doc"}),". Below is a JSON document Couchbase:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n  "id": "11c255ad10bff4286781f596a5afd9ab093ed056d41bca4120c849058e52f24d",\n  "embedding": [0.6394268274307251, 0.02501075528562069,0.27502933144569397, ...], // vector of size 384\n  "content": "My name is Morgan and I live in Paris.",\n  "meta": {\n    "num_of_years": 3\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The full list of parameters accepted by ",(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"})," can be found in ",(0,s.jsx)(n.a,{href:"/reference/couchbase_document_store",children:"API documentation"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"indexing-documents",children:"Indexing Documents"}),"\n",(0,s.jsxs)(n.p,{children:["With Haystack you can use ",(0,s.jsx)(n.a,{href:"https://docs.haystack.deepset.ai/v2.0/docs/documentwriter",children:"DocumentWriter"})," component to write Documents into a Document Store. In the example below, we construct a pipeline to write documents to Couchbase using ",(0,s.jsx)(n.code,{children:"CouchbaseDocumentStore"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from haystack import Document\nfrom haystack.components.embedders import SentenceTransformersDocumentEmbedder\nfrom haystack.components.writers import DocumentWriter\nfrom haystack.pipeline import Pipeline\n\nfrom couchbase_haystack import CouchbaseDocumentStore, CouchbasePasswordAuthenticator\n\ndocuments = [Document(content="This is document 1"), Document(content="This is document 2")]\n\ndocument_store = CouchbaseDocumentStore(\n    cluster_connection_string= Secret.from_token("localhost"),\n    authenticator=CouchbasePasswordAuthenticator(\n        username = Secret.from_token("username"),\n        password = Secret.from_token("password")\n    ),\n    bucket = "haystack_bucket_name",\n    scope="haystack_scope_name",\n    collection="haystack_collection_name",\n    vector_search_index = "vector_search_index"\n)\nembedder = SentenceTransformersDocumentEmbedder(model="sentence-transformers/all-MiniLM-L6-v2")\ndocument_writer = DocumentWriter(document_store=document_store)\n\nindexing_pipeline = Pipeline()\nindexing_pipeline.add_component(instance=embedder, name="embedder")\nindexing_pipeline.add_component(instance=document_writer, name="writer")\n\nindexing_pipeline.connect("embedder", "writer")\nindexing_pipeline.run({"embedder": {"documents": documents}})\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:">>> output:\n`{'writer': {'documents_written': 2}}`\n"})}),"\n",(0,s.jsx)(n.h3,{id:"retrieving-documents",children:"Retrieving Documents"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"CouchbaseEmbeddingRetriever"})," component can be used to retrieve documents from Couchbase by querying vector index using an embedded query. Below is a pipeline which finds documents using query embedding:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from typing import List\n\nfrom haystack import Document, Pipeline\nfrom haystack.components.embedders import SentenceTransformersDocumentEmbedder, SentenceTransformersTextEmbedder\n\nfrom couchbase_haystack.document_store import CouchbaseDocumentStore, CouchbasePasswordAuthenticator\nfrom couchbase_haystack.component.retriever import CouchbaseEmbeddingRetriever\n\ndocument_store = CouchbaseDocumentStore(\n    cluster_connection_string= Secret.from_token("localhost"),\n    authenticator=CouchbasePasswordAuthenticator(\n        username = Secret.from_token("username"),\n        password = Secret.from_token("password")\n    ),\n    bucket = "haystack_bucket_name",\n    scope="haystack_scope_name",\n    collection="haystack_collection_name",\n    vector_search_index = "vector_search_index"\n)\n\ndocuments = [\n    Document(content="My name is Morgan and I live in Paris.", meta={"num_of_years": 3}),\n    Document(content="I am Susan and I live in Berlin.", meta={"num_of_years": 7}),\n]\n\n# Same model is used for both query and Document embeddings\nmodel_name = "sentence-transformers/all-MiniLM-L6-v2"\n\ndocument_embedder = SentenceTransformersDocumentEmbedder(model=model_name)\ndocument_embedder.warm_up()\ndocuments_with_embeddings = document_embedder.run(documents)\n\ndocument_store.write_documents(documents_with_embeddings.get("documents"))\n\nprint("Number of documents written: ", document_store.count_documents())\n\npipeline = Pipeline()\npipeline.add_component("text_embedder", SentenceTransformersTextEmbedder(model=model_name))\npipeline.add_component("retriever", CouchbaseEmbeddingRetriever(document_store=document_store))\npipeline.connect("text_embedder.embedding", "retriever.query_embedding")\n\nresult = pipeline.run(\n    data={\n        "text_embedder": {"text": "What cities do people live in?"},\n        "retriever": {\n            "top_k": 5\n        },\n    }\n)\n\ndocuments: List[Document] = result["retriever"]["documents"]\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:">>> output:\n[Document(id=3930326edabe6d172031557556999e2f8ba258ccde3c876f5e3ac7e66ed3d53a, content: 'My name is Morgan and I live in Paris.', meta: {'num_of_years': 3}, score: 0.8348373770713806)]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"more-examples",children:"More Examples"}),"\n",(0,s.jsxs)(n.p,{children:["You can find more examples in the implementation ",(0,s.jsx)(n.a,{href:"https://github.com/Couchbase-Ecosystem/couchbase-haystack/blob/main/examples",children:"repository"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/Couchbase-Ecosystem/couchbase-haystack/blob/main/examples/indexing_pipeline.py",children:"indexing_pipeline.py"})," - Indexing text files (documents) from a remote HTTP location."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/Couchbase-Ecosystem/couchbase-haystack/blob/main/examples/rag_pipeline.py",children:"rag_pipeline.py"})," - Generative question answering RAG pipeline using ",(0,s.jsx)(n.code,{children:"CouchbaseEmbeddingRetriever"})," to fetch documents from Couchbase document store and answer questions using ",(0,s.jsx)(n.a,{href:"https://docs.haystack.deepset.ai/v2.0/docs/huggingfacetgigenerator",children:"HuggingFaceTGIGenerator"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"couchbase-haystack"})," is distributed under the terms of the ",(0,s.jsx)(n.a,{href:"https://spdx.org/licenses/MIT.html",children:"MIT"})," license."]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const o={},c=s.createContext(o);function r(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);